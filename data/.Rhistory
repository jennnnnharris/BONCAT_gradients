mutate(Total= Count*10^Dilution)
popsize.median<- popsize %>% group_by(Time,Trt) %>% summarize_at(.vars = "Total",.funs = list(~median(.),~min(.),~max(.)),rm.na=TRUE) %>% drop_na()
pdf(file = "../figures/Fig2_PopSizeLine.pdf",useDingbats = FALSE, height=3, width=4.5)
ggplot(data = popsize.median, aes(y=median,x=Time,color=Trt))+
geom_point(position = position_dodge(width = 2),aes(shape=as.factor(Time)))+
geom_line(position = position_dodge(width = 2))+
geom_errorbar(aes(ymin=min,ymax=max), position = position_dodge(width = 2))+
scale_color_manual(values = paste(mycols$cols),name="Treatment")+
scale_shape_manual(values = c(2,1,12,19),guide=FALSE)+
xlab("Timepoint (wks)")+
ylab("Rhizobia Population Size")+
scale_y_log10()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.key = element_rect(fill="white"))
dev.off()
pdf(file = "../figures/Fig2_PopSizeBoxplot.pdf",useDingbats = FALSE, height=4, width=6)
ggplot(data = popsize, aes(y=Total,x=Trt,color=Trt))+
geom_boxplot()+
geom_point()+
scale_color_manual(values = paste(mycols$cols))+
scale_y_log10()+
ylab("Rhizobia Population Size")+
facet_wrap(~Time,ncol=4,scales = "free_x")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill="white"),axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
dev.off()
# Prepare the data-Calculate median strain fitness for each treatment @ 24wks and create it into a single dataframe with a column for each treatment and a row for each strain.
fitness<-meso_fit_long %>% filter(Time =="24wk") %>% group_by(Trt,strain) %>% summarise_if(is.numeric,median) %>% pivot_wider(names_from = Trt,values_from = fitness)
fitness$strain<- as.character(fitness$strain)
fitness$strain <- gsub("X","",fitness$strain) # get rid of the X's in front of the strains
fitness$strain <- gsub("USDA","",fitness$strain) # get rid of the USDA's in front of the strains
#library (gplots)
library(ape)
## Read in the tree file created by Brendan
tree = read.tree('../data/tree.nw')
head(fitness)
tree
# Create the matrix and get the column dendrogram for the heatmap from it.
m = structure(as.matrix(fitness[, -1]),
dimnames=list(unlist(fitness[, 'strain']),
unlist(names(fitness)[-1])))
m
col_dendro = as.dendrogram(hclust(dist(t(m))))
col_dendro
## Set the working directory; modify to your own ###
setwd("C:/Users/Jenn/OneDrive - The Pennsylvania State University/Documents/Github/BONCAT_gradients/data")
### Import Data ###
taxon <- read.table("16s/taxonomy.txt", sep="\t", header=T, row.names=1)
otus.raw <- read.table("16s/feature-table.tsv", sep="\t", header=T, row.names = 1 )
metadat <- read.delim("16s/metadata.txt", sep="\t", header = T, check.names=FALSE)
## Transpose OTU table ##
otus.t <- t(otus.raw)
## order metadata
metadat<-metadat[order(metadat$SampleID),]
## order otu table
otus.t<-otus.t[order(row.names(otus.t)),]
## Determine minimum available reads per sample ##
min(rowSums(otus.t))
### Rarefy to obtain even numbers of reads by sample ###
set.seed(336)
otus.r<-rrarefy(otus.t, 41610)
#rarecurve
S <- specnumber(otus.t) # observed number of species
raremax <- min(rowSums(otus.t))
plot(otus.t, otus.r, xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
abline(0, 1)
out<-rarecurve(otus.t, step = 20, sample = raremax, col = "blue", cex = 0.6)
## build plots
col <- c("black")
lty <- c("solid")
lwd <- rep(1, 42)
######--- recode metadata----- ########
metadat<-metadat%>% mutate(Compartment=recode(Fraction, 'Bulk'='Bulk_Soil', 'Rhizo'='Rhizosphere','Endo'='Roots', 'Nod'='Nodule'))
metadat<-metadat[, c(1,3:6)]
metadat<-metadat%>% mutate(Fraction=recode(BONCAT, 'DNA'= 'Total_DNA', 'SYBR'= 'Total_Cells', 'POS'='BONCAT_Active', 'ctl'= 'ctl'))
#to make coloring things easier I'm gong to added a combined fractionXboncat column
metadat<-mutate(metadat, compartment_BCAT = paste0(metadat$Compartment, metadat$Fraction))
######--- recode metadata----- ########
metadat<-metadat%>% mutate(Compartment=recode(Fraction, 'Bulk'='Bulk_Soil', 'Rhizo'='Rhizosphere','Endo'='Roots', 'Nod'='Nodule'))
metadat<-metadat[, c(1,3:6)]
metadat<-metadat%>% mutate(Fraction=recode(BONCAT, 'DNA'= 'Total_DNA', 'SYBR'= 'Total_Cells', 'POS'='BONCAT_Active', 'ctl'= 'ctl'))
#to make coloring things easier I'm gong to added a combined fractionXboncat column
metadat<-mutate(metadat, compartment_BCAT = paste0(metadat$Compartment, metadat$Fraction))
#####------make phyloseq object with rarefied data -------#####
otus.phyloseq<- (otus.r)
taxon<-taxon[,1:7]
metadat<-as.matrix(metadat)
y<-colnames(otus.raw)
rownames(metadat) <- y
metadat<-as.data.frame(metadat)
#import it phyloseq
Workshop_OTU <- otu_table(otus.phyloseq, taxa_are_rows = FALSE)
Workshop_metadat <- sample_data(metadat)
Workshop_taxo <- tax_table(as.matrix(taxon))
ps <- phyloseq(Workshop_taxo, Workshop_OTU,Workshop_metadat)
#test it worked
#sample_names(ps)
print(ps)
# 15027 taxa
# remove chloroplast DNA
ps<-subset_taxa(ps, Class!=" Chloroplast")
ps<-subset_taxa(ps, Genus!=" Mitochondria")
ps<-subset_taxa(ps, Genus!=" Chloroplast")
# get rid of taxa that aren; in any samples
ps<-prune_taxa(taxa_sums(ps) > 0, ps)
any(taxa_sums(ps) == 0)
ps
# 14593 taxa
otus<-as.data.frame(t(as.data.frame(otu_table(ps))))
taxon<-as.data.frame(tax_table(ps))
#################------ fold change total to active---------------####
#### remove taxa from bulk soil
ps1<- subset_samples(ps,Fraction !="Total_DNA"& Fraction!="beads" & Fraction !="ctl" )
ps1<-prune_taxa(taxa_sums(ps1) > 0, ps1)
any(taxa_sums(ps1) == 0)
ps1
# 6189 taxa
#Who are the most abundant taxa minus the total DNA
#who are most abundant taxa
topN = 200
most_abundant_taxa = sort(taxa_sums(ps1), TRUE)[1:topN]
print(most_abundant_taxa)
Top_tax = prune_taxa(names(most_abundant_taxa), ps1)
length(get_taxa_unique(Top_tax, "Class"))
length(get_taxa_unique(Top_tax, "Phyla"))
length(get_taxa_unique(Top_tax, "Genus"))
length(get_taxa_unique(Top_tax, "Family"))
tax_table(Top_tax)
otu_table(Top_tax)
# subset total cell and active fraction
ps.Total<- subset_samples(ps1,Fraction =="Total_Cells" )
otu_total<-as.data.frame(t(as.data.frame(otu_table(ps.Total))))
# boncat pos table doesn't have C7Rpos, so I'll remove that from the table
head(otu_total)
otu_total<-select(otu_total, -C7R.SYBR_S19)
# length #7185
#       C10N.SYBR_S26 C10R.SYBR_S20 C1E.SYBR_S21 C1N.SYBR_S13
# taxa1  139581          1430        62828       126909
# taxa2  19537           179         8553        17541
# taxa3  78                0         4336        22797
ps.Active<- subset_samples(ps1,Fraction =="BONCAT_Active" )
otu_active<-as.data.frame(t(as.data.frame(otu_table(ps.Active))))
## missing some sample from sybr for C10 E and C5 N
## so i think I'll just remove those ones and won't have a value for inactive for those samples
otu_active<-select(otu_active, -C10E.POS_S60, -C5N.POS_S63)
head(otu_active)
#sum<-rowSums(otu_active)
# length 7185
# taxa1 10000
# taxa2 0
# taxa3 0
##------- log fold change from active to inactive ----------
#what do you do for things that are not present in total?
# can we just add 1 to everything?
otu_log2<-log2(otu_active+1/(otu_total+1))
n<-c("C10N", "C10R" ,"C1E" , "C1N" , "C1R" , "C2E" , "C2N" , "C2R" , "C5E" , "C5R" , "C7E" , "C7N" )
colnames(otu_log2)<-n
head(otu_log2)
#zero in numerator = not present in active = -inf
######--- recode metadata----- ########
metadat<-metadat%>% mutate(Compartment=recode(Fraction, 'Bulk'='Bulk_Soil', 'Rhizo'='Rhizosphere','Endo'='Roots', 'Nod'='Nodule'))
metadat<-metadat[, c(1,3:6)]
metadat<-metadat%>% mutate(Fraction=recode(BONCAT, 'DNA'= 'Total_DNA', 'SYBR'= 'Total_Cells', 'POS'='BONCAT_Active', 'ctl'= 'ctl'))
#to make coloring things easier I'm gong to added a combined fractionXboncat column
metadat<-mutate(metadat, compartment_BCAT = paste0(metadat$Compartment, metadat$Fraction))
otus.phyloseq<- (otus.r)
taxon<-taxon[,1:7]
metadat<-as.matrix(metadat)
y<-colnames(otus.raw)
rownames(metadat) <- y
metadat<-as.data.frame(metadat)
#import it phyloseq
Workshop_OTU <- otu_table(otus.phyloseq, taxa_are_rows = FALSE)
Workshop_metadat <- sample_data(metadat)
Workshop_taxo <- tax_table(as.matrix(taxon))
ps <- phyloseq(Workshop_taxo, Workshop_OTU,Workshop_metadat)
library(tidyverse)
library(vegan)
library(RColorBrewer)
library(reshape2)
library(scales)
library(data.table)
library(phyloseq)
library(DT)
library(Heatplus)
library(viridis)
library(hrbrthemes)
library(ade4)
#library (gplots)
library(ape)
## Set the working directory; modify to your own ###
setwd("C:/Users/Jenn/OneDrive - The Pennsylvania State University/Documents/Github/BONCAT_gradients/data")
### Import Data ###
taxon <- read.table("16s/taxonomy.txt", sep="\t", header=T, row.names=1)
otus.raw <- read.table("16s/feature-table.tsv", sep="\t", header=T, row.names = 1 )
metadat <- read.delim("16s/metadata.txt", sep="\t", header = T, check.names=FALSE)
## Transpose OTU table ##
otus.t <- t(otus.raw)
## order metadata
metadat<-metadat[order(metadat$SampleID),]
## order otu table
otus.t<-otus.t[order(row.names(otus.t)),]
## Determine minimum available reads per sample ##
min(rowSums(otus.t))
### Rarefy to obtain even numbers of reads by sample ###
set.seed(336)
otus.r<-rrarefy(otus.t, 41610)
######--- recode metadata----- ########
metadat<-metadat%>% mutate(Compartment=recode(Fraction, 'Bulk'='Bulk_Soil', 'Rhizo'='Rhizosphere','Endo'='Roots', 'Nod'='Nodule'))
metadat<-metadat[, c(1,3:6)]
metadat<-metadat%>% mutate(Fraction=recode(BONCAT, 'DNA'= 'Total_DNA', 'SYBR'= 'Total_Cells', 'POS'='BONCAT_Active', 'ctl'= 'ctl'))
#to make coloring things easier I'm gong to added a combined fractionXboncat column
metadat<-mutate(metadat, compartment_BCAT = paste0(metadat$Compartment, metadat$Fraction))
otus.phyloseq<- (otus.r)
taxon<-taxon[,1:7]
metadat<-as.matrix(metadat)
y<-colnames(otus.raw)
rownames(metadat) <- y
metadat<-as.data.frame(metadat)
#import it phyloseq
Workshop_OTU <- otu_table(otus.phyloseq, taxa_are_rows = FALSE)
Workshop_metadat <- sample_data(metadat)
Workshop_taxo <- tax_table(as.matrix(taxon))
ps <- phyloseq(Workshop_taxo, Workshop_OTU,Workshop_metadat)
#test it worked
#sample_names(ps)
print(ps)
# remove chloroplast DNA
ps<-subset_taxa(ps, Class!=" Chloroplast")
ps<-subset_taxa(ps, Genus!=" Mitochondria")
ps<-subset_taxa(ps, Genus!=" Chloroplast")
# get rid of taxa that aren; in any samples
ps<-prune_taxa(taxa_sums(ps) > 0, ps)
any(taxa_sums(ps) == 0)
ps
otus<-as.data.frame(t(as.data.frame(otu_table(ps))))
taxon<-as.data.frame(tax_table(ps))
#################------ fold change total to active---------------####
#### remove taxa from bulk soil
ps1<- subset_samples(ps,Fraction !="Total_DNA"& Fraction!="beads" & Fraction !="ctl" )
ps1<-prune_taxa(taxa_sums(ps1) > 0, ps1)
any(taxa_sums(ps1) == 0)
ps1
ps1
#Who are the most abundant taxa minus the total DNA
#who are most abundant taxa
topN = 200
most_abundant_taxa = sort(taxa_sums(ps1), TRUE)[1:topN]
print(most_abundant_taxa)
Top_tax = prune_taxa(names(most_abundant_taxa), ps1)
length(get_taxa_unique(Top_tax, "Class"))
length(get_taxa_unique(Top_tax, "Phyla"))
length(get_taxa_unique(Top_tax, "Genus"))
length(get_taxa_unique(Top_tax, "Family"))
tax_table(Top_tax)
otu_table(Top_tax)
# subset total cell and active fraction
ps.Total<- subset_samples(ps1,Fraction =="Total_Cells" )
otu_total<-as.data.frame(t(as.data.frame(otu_table(ps.Total))))
head(otu_total)
otu_total<-select(otu_total, -C7R.SYBR_S19)
ps.Active<- subset_samples(ps1,Fraction =="BONCAT_Active" )
otu_active<-as.data.frame(t(as.data.frame(otu_table(ps.Active))))
## missing some sample from sybr for C10 E and C5 N
## so i think I'll just remove those ones and won't have a value for inactive for those samples
otu_active<-select(otu_active, -C10E.POS_S60, -C5N.POS_S63)
head(otu_active)
otu_log2<-log2(otu_active+1/(otu_total+1))
n<-c("C10N", "C10R" ,"C1E" , "C1N" , "C1R" , "C2E" , "C2N" , "C2R" , "C5E" , "C5R" , "C7E" , "C7N" )
colnames(otu_log2)<-n
head(otu_log2)
otus.phyloseq<- t(otu_log2)
metadat_l<- read.delim("16s/metadata_log2.txt", sep="\t", header = T, check.names=FALSE)
y<-colnames(otu_log2)
rownames(metadat_l) <- y
metadat_l<-as.data.frame(metadat_l)
metadat_l
# check distribution
otu_log2
hist(otu_log2$C10N)
hist(otu_log2$C10R)
hist(otu_log2$C1E)
hist(otu_log2$C1E, breaks = 10)
hist(otu_log2$C1E, breaks = 5)
hist(otu_log2$C1E, breaks = 20)
otu_table(Top_tax)
df<-as.data.frame(tax_table(Top_tax))
dim(df)
#make asvs column to join by
asvs<-row.names(df)
df<-mutate(df, asvs=asvs)
asvs<-row.names(otu_log2)
otu_log2<-mutate(otu_log2, asvs=asvs)
dfl<-left_join(df, otu_log2, by= "asvs")
dfl
dfl
metadat_l
left_join(dfl, metadata_l
left_join(dfl, metadata_l)
left_join(dfl, metadata_l)
left_join(dfl, metadat_l)
otu_log2
t(otu_log2)
t_log2<- t(otu_log2)
metadat_l<- read.delim("16s/metadata_log2.txt", sep="\t", header = T, check.names=FALSE)
y<-colnames(otu_log2)
rownames(metadat_l) <- y
metadat_l<-as.data.frame(metadat_l)
metadat_l
left_join(t_log2, metadat_l)
left_join(as.data.frame(t_log2), metadat_l)
left_join(as.data.frame(t_log2), metadat_l, by= "SAMPLE_ID")
head(t_log2)
order(t_log2)
View(t_log2)
otu_log2<-log2(otu_active+1/(otu_total+1))
n<-c("C10N", "C10R" ,"C1E" , "C1N" , "C1R" , "C2E" , "C2N" , "C2R" , "C5E" , "C5R" , "C7E" , "C7N" )
colnames(otu_log2)<-n
head(otu_log2)
t_log2<- t(otu_log2)
order(t_log2)
metadat_l<- read.delim("16s/metadata_log2.txt", sep="\t", header = T, check.names=FALSE)
y<-colnames(otu_log2)
rownames(metadat_l) <- y
metadat_l<-as.data.frame(metadat_l)
rbind(metadat_l, t_log2)
View(metadat_l)
dim(metadat_l)
dim(t_log2)
rbind(metadat_l, t_log2)
bcind(metadat_l, t_log2)
cbind(metadat_l, t_log2)
t_log2_otu<-cbind(metadat_l, t_log2)
View(t_log2_otu)
#sumarise by rep
t_log2_otu_short<- t_log2_otu %>% group_by(Fraction) %>% summarise_if(is.numeric,median)
t_log2_otu_short
#sumarise by rep
t_log2_otu_short<- t_log2_otu %>% group_by(Fraction) %>% summarise_if(is.numeric,median) %>% select(-REP)
t_log2_otu_short
t(t_log2_otu)
otu_table(Top_tax)
df<-as.data.frame(tax_table(Top_tax))
dim(df)
#make asvs column to join by
asvs<-row.names(df)
df<-mutate(df, asvs=asvs)
asvs<-row.names(otu_log2)
otu_log2<-mutate(otu_log2, asvs=asvs)
otu_log2_200<-left_join(df, otu_log2, by= "asvs")
otu_log2_200
## Read in the tree file made by jenn
tree = read.tree("16s/tree.nwk")
#library (gplots)
library(ape)
# load in the function for making a heatmap with the tree #
heatmap.phylo <- function(x, Rowp, Colp, ...) {
l = length(seq(-4.9, 5, 0.1))
pal = colorRampPalette(c('#2166ac', '#f7f7f7', '#b2182b'))(l)
row_order = Rowp$tip.label[Rowp$edge[Rowp$edge[, 2] <= Ntip(Rowp), 2]]
col_order = Colp$tip.label[Colp$edge[Colp$edge[, 2] <= Ntip(Colp), 2]]
x <- x[row_order, col_order]
xl <- c(0.5, ncol(x)+0.5)
yl <- c(0.5, nrow(x)+0.5)
layout(matrix(c(0,1,0, 2,3,4, 0,5,0), nrow=3, byrow=TRUE),
width=c(3.5,    4.5, 1),
height=c(0.2, 3, 0.18))
par(mar=rep(0,4))
plot(Colp, direction="downwards", show.tip.label=FALSE,
xaxs="i", x.lim=xl)
par(mar=rep(0,4))
plot(Rowp, direction="rightwards", show.tip.label=FALSE,
yaxs="i", y.lim=yl)
lpp = .PlotPhyloEnv$last_plot.phylo
segments(lpp$xx[1:Ntip(Rowp)], lpp$yy[1:Ntip(Rowp)], par('usr')[2],
lpp$yy[1:Ntip(Rowp)], lty=3, col='grey50')
par(mar=rep(0,4), xpd=TRUE)
image((1:ncol(x))-0.5, (1:nrow(x))-0.5, t(x), col=pal,
xaxs="i", yaxs="i", axes=FALSE, xlab="",ylab="",breaks=seq(-5,5,0.1))
par(mar=rep(0,4))
plot(NA, axes=FALSE, ylab="", xlab="", yaxs="i", xlim=c(0,2), ylim=yl)
text(rep(0,nrow(x)),1:nrow(x), row_order, pos=4, family='Helvetica',
cex=1, xpd=NA)
par(mar=rep(0,4))
plot(NA, axes=FALSE, ylab="", xlab="", xaxs="i", ylim=c(0,2), xlim=xl)
text(1:ncol(x),rep(2,ncol(x)), col_order, srt=90, adj=c(1,.5), family='Helvetica',
cex=1.5)
}
otu_log2_200
otu_log2_200[-1]
otu_log2_200[,-1]
otu_log2_200[-5,]
otu_log2_200[,-5]
as.matrix(otu_log2_200[,-5])
as.matrix(otu_log2_200[,4])
otu_log2_200[,4:5]
otu_log2_200[,-(1:5)]
otu_log2_200[,-(1:8)]
otu_log2_200[,-(1:7)]
as.matrix(otu_log2_200[,-(1:7)])
as.matrix(otu_log2_200[,-(1:8)])
# Create the matrix and get the column dendrogram for the heatmap from it.
# got remove all those extract columns and
m = structure(as.matrix(otu_log2_200[,-(1:8)]),
dimnames=list(unlist(otu_log2_200[, 'asvs']),
unlist(names(fitness)[-1])))
# Create the matrix and get the column dendrogram for the heatmap from it.
# got remove all those extract columns and
m = structure(as.matrix(otu_log2_200[,-(1:8)]),
dimnames=list(unlist(otu_log2_200[, 'asvs']),
unlist(names(otu_log2_200)[-1])))
unlist(otu_log2_200[, 'asvs'])
list(unlist(otu_log2_200[, 'asvs'])
names(otu_log2_200)[-1])
names(otu_log2_200)[-1]))
otu_log2_200[-1]
names(otu_log2_200[-1])
names(otu_log2_200[,-(1:8)
names(otu_log2_200[,-(1:8)])
names(otu_log2_200[,-(1:8)])
# Create the matrix and get the column dendrogram for the heatmap from it.
# got remove all those extract columns and
m = structure(as.matrix(otu_log2_200[,-(1:8)],
dimnames=list(unlist(otu_log2_200[, 'asvs'])),
unlist(names(otu_log2_200[,-(1:8)])))))
# Create the matrix and get the column dendrogram for the heatmap from it.
# got remove all those extract columns and
m = structure(as.matrix(otu_log2_200[,-(1:8)],
dimnames=list(unlist(otu_log2_200[, 'asvs'])),
unlist(names(otu_log2_200[,-(1:8)]))))
as.matrix()
??as.matrix()
?as.matrix()
# Create the matrix and get the column dendrogram for the heatmap from it.
# got remove all those extract columns and
y
asvs
asvs200 =
list(unlist(otu_log2_200[, 'asvs']))
#asvs200 =
list(unlist(otu_log2_200[, 'asvs']))
asvs200 =   list(unlist(otu_log2_200[, 'asvs']))
?structure
m = structure(as.matrix(otu_log2_200[,-(1:8)],
dimnames= asvs200, as.list(y)))
m = as.matrix(otu_log2_200[,-(1:8)],
dimnames= asvs200, as.list(y))
as.list(y)
asvs200
m = as.matrix(otu_log2_200[,-(1:8)])
m
m = as.matrix(otu_log2_200[,-(1:8)])
row.names(m)<-asvs200
dim(m)
asvs200
asvs200 =   (otu_log2_200[, 'asvs'])
row.names(m)<-asvs200
m
structure(m)
m<-structure(m)
col_dendro = as.dendrogram(hclust(dist(t(m))))
tree
drop.tip(asvs200)
asvs200
drop.tip(lsit(asvs200))
drop.tip(list(asvs200))
asvs
as.factor(asvs)
asvs200
drop.tip(tree, (as.factor(asvs200)))
# And )make the plot....
#pdf(file="../figures/Fig2_heatmap24wk_Phylo.pdf",width = 5,height=8, useDingbats=FALSE)
heatmap.phylo(x = m, Rowp = tree, Colp = as.phylo(as.hclust(col_dendro)))
asvs200
as.logical(asvs200)
as.raw(asvs200)
as.complex(asvs200)
#I'm curious who these asvs are so I'm going to add there names in
asvs<-row.names(df)
asvs
dim(df)
drop.tip(tree, 127c5591e63cb7d4ce0c520dc4f7d1c1)
tree$tip.label
drop.tip(tree, "127c5591e63cb7d4ce0c520dc4f7d1c1")
drop.tip(tree, asvs200)
asvs
dim(asvs)
l(asvs)
length(asvs)
### Import Data ###
taxon <- read.table("16s/taxonomy.txt", sep="\t", header=T, row.names=1)
otus.raw <- read.table("16s/feature-table.tsv", sep="\t", header=T, row.names = 1 )
metadat <- read.delim("16s/metadata.txt", sep="\t", header = T, check.names=FALSE)
otus.raw
length(otus.raw
length(otus.raw)
length(otus.raw)
dim(otus.raw)
row.names(otus.raw)
asvs<-row.names(otus.raw)
setdiff
setdiff(asvs200, asvs)
intersect(asvs200, asvs)
setdiff(asvs, asvs200)
asvs_remove<-setdiff(asvs, asvs200)
drop.tip(tree, asvs_remove)
tree<-drop.tip(tree, asvs_remove)
# And )make the plot....
#pdf(file="../figures/Fig2_heatmap24wk_Phylo.pdf",width = 5,height=8, useDingbats=FALSE)
heatmap.phylo(x = m, Rowp = tree, Colp = as.phylo(as.hclust(col_dendro)))
